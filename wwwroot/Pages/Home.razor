@page "/home"
@using System.Linq
@inject IJSRuntime JS

<div class="topPanel">
    <input type="text" placeholder="Search..." @bind="searchText" @bind:event="oninput" />
    <button @onclick="Search">Search</button>
    <button @onclick="GoHome">Home</button>
    <button @onclick="ToggleProductFamily">Product Family</button>
</div>

<div class="container">
    @if (showSidePanel)
    {
        <div class="sidePanel">
            <h3>Product Family</h3>
            @foreach (var reference in filteredReferences)
            {
                <button @onclick='() => SelectReference(reference)'>@reference</button>
            }
        </div>
    }

    <div class="mainContent">
        @if (showManufacturing)
        {
            <ManufacturingProcessesComponent OnClose="CloseManufacturingProcesses" />
        }
        else if (!string.IsNullOrEmpty(selectedReference))
        {
            <div class="ref-section">
                <button @onclick="Back">⬅ Back</button>
                <p><strong>Reference:</strong> @selectedReference</p>

                @if (showSubPanel)
                {
                    <button @onclick='() => SelectSubItem("610124093")'>610124093</button>
                }

                @if (showButtons)
                {
                    <div class="buttonsPanel">
                        <button @onclick="ToggleBillOfMaterials">Bill of Materials</button>
                        <button @onclick="OpenManufacturingProcesses">Manufacturing Processes</button>
                        <button @onclick='() => ShowPDF("P1012_E_00_Bl1_d_frz")'>Operating Instructions</button>
                        <button @onclick='() => ShowPDF("QualityDefectsLibrary")'>Quality Defects Library</button>
                    </div>

                    @if (showBillOfMaterials)
                    {
                        <div class="buttonsPanel" style="margin-top:10px;">
                            <button @onclick='() => ShowPDF("210121005")'>210121005</button>
                            <button @onclick='() => ShowPDF("2101230530")'>2101230530</button>
                            <button @onclick='() => ShowPDF("210124233")'>210124233</button>
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <p class="welcome-text">Welcome to FK Platform! Use the search or select a product family.</p>
        }
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private bool showSidePanel = false;
    private string? selectedReference = null;
    private bool showSubPanel = false;
    private bool showButtons = false;
    private bool showManufacturing = false;
    private bool showBillOfMaterials = false;

    private List<string> references = new() { "1012E.Q1.2", "2013X.A4.5", "3015Z.B2.7" };
    private List<string> filteredReferences = new();

    protected override void OnInitialized()
    {
        filteredReferences = references;
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredReferences = references;
        }
        else
        {
            filteredReferences = references
                .Where(r => r.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void GoHome()
    {
        selectedReference = null;
        showSidePanel = false;
        showSubPanel = false;
        showButtons = false;
        showManufacturing = false;
        showBillOfMaterials = false;
    }

    private void ToggleProductFamily()
    {
        showSidePanel = !showSidePanel;
    }

    private void SelectReference(string reference)
    {
        selectedReference = reference;
        showSubPanel = true;
        showButtons = false;
        showManufacturing = false;
        showBillOfMaterials = false;
    }

    private void Back()
    {
        showSubPanel = false;
        showButtons = false;
        showManufacturing = false;
        showBillOfMaterials = false;
    }

    private void SelectSubItem(string subItem)
    {
        showButtons = true;
    }

    private void ToggleBillOfMaterials()
    {
        showBillOfMaterials = !showBillOfMaterials;
    }

    private void OpenManufacturingProcesses()
    {
        showManufacturing = true;
        showBillOfMaterials = false;
    }

    private async Task ShowPDF(string type)
    {
        if (type == "ManufacturingProcesses")
        {
            showManufacturing = true;
            showBillOfMaterials = false;
            return;
        }

        string? fileName = type switch
        {
            "210124233" => "210124233.pdf",
            "210121005" => "210121005.pdf",
            "2101230530" => "2101230530.pdf",
            "P1012_E_00_Bl1_d_frz" => "P1012_E_00_Bl1_d_frz.pdf",
            "QualityDefectsLibrary" => null, // ما فماش PDF حاليا
            _ => null
        };

        if (!string.IsNullOrEmpty(fileName))
        {
            await JS.InvokeVoidAsync("open", $"pdfs/{fileName}", "_blank");
        }
    }

    private void CloseManufacturingProcesses()
    {
        showManufacturing = false;
    }
}
